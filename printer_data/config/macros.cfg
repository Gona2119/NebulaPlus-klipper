#AGREGADOS EN FLUIDD


## UNSAFE_MOVE_TOOL
## Move the toolhead without homing
########## Parameters ##########
## X: The X distance to move by (default: 0) mm
## Y: The Y distance to move by (default: 0) mm
## Z: The Z distance to move by (default: 0) mm
## F: The feedrate to use (default: 10) mm/s
[gcode_macro UNSAFE_MOVE_TOOL]
description: Move the toolhead without homing
gcode:
    {% set z = params.Z|default(0)|float %}
    {% set x = params.X|default(0)|float %}
    {% set y = params.Y|default(0)|float %}
    {% set f = params.F|default(10)|float %}
    G90
    SET_KINEMATIC_POSITION Z={(printer.toolhead.axis_maximum.z/2)} X={(printer.toolhead.axis_maximum.x/2)} Y={(printer.toolhead.axis_maximum.y/2)}
    G0 X{(printer.toolhead.axis_maximum.x/2)+x} Y{(printer.toolhead.axis_maximum.y/2)+y} Z{(printer.toolhead.axis_maximum.z/2)+z} F{ (f*60) }
    M84
    
#/////////////////////////////////////////////////////////
#[gcode_macro PAUSE]
#description: Pause the actual running print
#rename_existing: PAUSE_BASE
#gcode:
#  M300 P1000
#  G4 P500
#  M300 P500
#  PAUSE_BASE
#  _TOOLHEAD_PARK_PAUSE_CANCEL

[gcode_macro Guardar_Offset]
description: Guarda el valor actual de offset que se ajusto
gcode:
    Z_OFFSET_APPLY_PROBE

[gcode_macro Extruir_50mm]
gcode:
    G91 E50 F50
                    
[gcode_macro Calibrar]
gcode:
    G28
    G90
    G1 X53 Y115
    PROBE_CALIBRATE

[gcode_macro OFF]
gcode:
    M84                                  ; turn steppers off
    TURN_OFF_HEATERS                     ; turn bed / hotend off
    M107                                 ; turn print cooling fan off

#[gcode_macro CANCEL_PRINT]
#rename_existing: BASE_CANCEL_PRINT
#gcode:
#    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} ; set timeout back to configured value
#    CLEAR_PAUSE
#    SDCARD_RESET_FILE
#    #FIN_IMPRESION
#    BASE_CANCEL_PRINT


#[gcode_macro M600]
#gcode:
#       PAUSE

#[gcode_macro _CG28]
# Conditional homing
#gcode:
#    {% if "xyz" not in printer.toolhead.homed_axes %}
#        G28
#    {% endif %}


#[gcode_macro RESUME]
##rename_existing: BASE_RESUME
#variable_zhop: 0
#variable_etemp: 0
#gcode:
    # Parameters
 #   {% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)

 #   {% if printer['pause_resume'].is_paused|int == 1 %}
        #SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1                          ; enable filament sensor
        #INITIAL_RGB                                                                    ; reset LCD color
  #      SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
 #       {% if etemp > 0 %}
  #          M109 S{etemp|int}                                                        ; wait for hotend to heat back up
  #      {% endif %}
  #      RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)
   #     G91                                                                          ; relative positioning
   #     M83                                                                          ; relative extruder positioning
  #      {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
   #         G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
  #      {% else %}
  #          G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
  #      {% endif %}
  #      RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
  #      BASE_RESUME                                                                  ; resume print
  #  {% endif %}


#[gcode_macro PAUSE]
#rename_existing: BASE_PAUSE
#gcode:
    # Parameters
#    {% set z = params.Z|default(10)|int %}                                                   ; z hop amount

#    {% if printer['pause_resume'].is_paused|int == 0 %}
#        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
#        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro

        #SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0                                  ; disable filament sensor
#        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume
#        BASE_PAUSE                                                                           ; pause print
#        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
####            G91                                                                              ; relative positioning
#            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
#        {% else %}
##            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
#            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
#        {% endif %}
#        G90                                                                                  ; absolute positioning
#        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000   ; park toolhead at front center
##        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
#        M104 S0                                                                              ; turn off hotend
#        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
#    {% endif %}



#[gcode_macro CANCEL_PRINT]
#description: Cancel the actual running print
#rename_existing: CANCEL_PRINT_BASE
#variable_park: True
#gcode:
  ## Move head and retract only if not already in the pause state and park set to true
#  {% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}
#    _TOOLHEAD_PARK_PAUSE_CANCEL
#  {% endif %}
#  TURN_OFF_HEATERS
 # M106 S0
 # CANCEL_PRINT_BASE

#[gcode_macro PAUSE]
#description: Pause the actual running print
#rename_existing: PAUSE_BASE
#gcode:
#  PAUSE_BASE
  #_TOOLHEAD_PARK_PAUSE_CANCEL

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description: Helper: park toolhead used in PAUSE and CANCEL_PRINT
variable_extrude: 1.0
gcode:
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  {% set z_park_delta = 2.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - z_park_delta) %}
    {% set z_safe = z_park_delta %}
  {% else %}
    {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    M83
    G1 E-{extrude} F2100
    {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G91
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
    {% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %}

#[gcode_macro AUTO_TUNE_EXTRUDER]
#gcode:
   #M106 S255
#   PID_CALIBRATE HEATER=extruder TARGET=225
   #M106 S0
#   SAVE_CONFIG
   

#[gcode_macro AUTO_TUNE_BED]
#gcode:
##    PID_CALIBRATE HEATER=heater_bed TARGET=60
#    SAVE_CONFIG

[gcode_macro M486]
gcode:

  {% if 'exclude_object' not in printer %}
    {action_raise_error("[exclude_object] is not enabled")}
  {% endif %}

  {% if 'T' in params %}
    EXCLUDE_OBJECT RESET=1

    {% for i in range(params.T | int) %}
      EXCLUDE_OBJECT_DEFINE NAME={i}
    {% endfor %}
  {% endif %}

  {% if 'C' in params %}
    EXCLUDE_OBJECT CURRENT=1
  {% endif %}

  {% if 'P' in params %}
    EXCLUDE_OBJECT NAME={params.P}
  {% endif %}

  {% if 'S' in params %}
    {% if params.S == '-1' %}
      {% if printer.exclude_object.current_object %}
        EXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}
      {% endif %}
    {% else %}
      EXCLUDE_OBJECT_START NAME={params.S}
    {% endif %}
  {% endif %}

  {% if 'U' in params %}
    EXCLUDE_OBJECT RESET=1 NAME={params.U}
  {% endif %}


[gcode_macro M300]
description: Emits an audible beep.

gcode:
  {% set P = params.P|default(100)|int %}   ; Duration in milliseconds
  {% set S = params.S|default(1000)|int %}  ; Frequency in Hertz

  # Check if "beeper_pin" is defined in the configuration
  {% if printer["output_pin beeper"] is defined %}
    SET_PIN PIN=beeper VALUE=1 CYCLE_TIME={ 1.0 / S }
    G4 P{P}  
    SET_PIN PIN=beeper VALUE=0
  {% else %}
    { action_respond_info("Beeper pin not defined in printer.cfg") }
  {% endif %}


[gcode_macro update_git]
gcode:
    {% set message = params.MESSAGE|default() %}
    {% if message %}
        RUN_SHELL_COMMAND CMD=update_git_script_message PARAMS="'{params.MESSAGE}'"
    {% else %}
        RUN_SHELL_COMMAND CMD=update_git_script
    {% endif %}

[gcode_shell_command update_git_script]
command: bash -c "bash $HOME/klipper-backup/script.sh"
timeout: 90.0
verbose: True

[gcode_shell_command update_git_script_message]
command: bash -c "bash $HOME/klipper-backup/script.sh $0"
timeout: 90.0
verbose: True


### SECCION DE MACROS DE SPOOLSMAN ### 
[gcode_macro SET_ACTIVE_SPOOL]
gcode:
  {% if params.ID %}
    {% set id = params.ID|int %}
    {action_call_remote_method(
       "spoolman_set_active_spool",
       spool_id=id
    )}
  {% else %}
    {action_respond_info("Parameter 'ID' is required")}
  {% endif %}

[gcode_macro CLEAR_ACTIVE_SPOOL]
gcode:
  {action_call_remote_method(
    "spoolman_set_active_spool",
    spool_id=None
  )}
  